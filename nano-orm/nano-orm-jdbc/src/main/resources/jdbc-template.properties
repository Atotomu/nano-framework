# JDBC属性模板文件
#
# @author yanghe
# @date 2015年7月30日 下午4:19:56 
#
# Mybatis模式
mybatis.environment.id=

# 原生JDBC模式，使用JDBC模式时不能使用JdbcHelper来初始化JDBC.driver和JDBC.url的属性，只能主动设置
# JDBC.environment.id=

# 数据源读取模式，现在有2种模式：
# 	1、属性文件模式({ mybatis.environment.type=Property }) 
# 	2、XML读取模式({ mybatis.environment.type=XML }) 
#	XML模式使用默认的连接池，此模式只支持自定义的方式，不支持JdbcHelper，并且需要添加mapper.package.name属性至此文件中
#	默认值：Property
mybatis.environment.type=

# XML模式下必须配置，否则将无法启动
# 此项内容为MyBatis的XML配置文件路径，同时需要增加对应位置的配置文件及内容，
# 默认值：/mybatis-config-druid.xml，此文件已经存在与nano-orm包中作为模板配置
# 已废除，现在使用JDBC.pool.type进行自动识别
# mybatis.environment.path=

# XML模式下需要将mapper包路径写在这里，如果不写在这里的话默认读取与mapper.package.jdbc属性相同的属性文件中
# 如果无法找到该属性的话则抛出异常。
# mapper.package.name=

# 连接池选项，目前支持: C3P0, DRUID. 默认使用DRUID连接池
# JDBC.pool.type=

# 自定义驱动和连接串
# 驱动类名
JDBC.driver=

# 连接串
JDBC.url=

# 使用JdbcHelper创建连接池
# 地址
# JDBC.host=

# 端口
# JDBC.port=

# 数据库名
# JDBC.schema=

# 用户名
JDBC.username=

# 密码
JDBC.password=

# false 和 true
JDBC.autoCommit=

# JDBC.defaultStatementTimeout=30

#######################################################################################
####################        C3P0连接池配置        #######################################
#######################################################################################
# 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
# c3p0.acquireIncrement=3

# 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
# c3p0.acquireRetryAttempts=30

# 两次连接中间隔时间，单位毫秒。Default: 1000
# c3p0.acquireRetryDelay=1000

# 连接关闭时默认将所有未提交的操作回滚。Default: false
# c3p0.autoCommitOnClose=false

# c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。
# 如果定义了这个参数那么属性preferredTestQuery将被忽略。
# 你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。Default: null
# c3p0.automaticTestTable=c3p0_test

# 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。
# 但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。
# 如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false
# c3p0.breakAfterAcquireFailure=false

# 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException。
# 如设为0则无限期等待, 单位毫秒, Default: 0
# c3p0.checkoutTimeout=10000

# 通过实现ConnectionTester或QueryConnectionTester的类来测试连接。
# 类名需制定全路径。Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester
# c3p0.connectionTesterClassName=

# 指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可 Default: null
# c3p0.factoryClassLocation=null

# Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.（文档原文）作者强烈建议不使用的一个属性
# c3p0.forceIgnoreUnresolvedTransactions=false

# 每隔多少秒检查一次所有连接池中的空闲连接。Default: 0
# c3p0.idleConnectionTestPeriod=60

# 初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3
# c3p0.initialPoolSize=3

# 最大空闲时间,隔多少秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
# c3p0.maxIdleTime=60

# 连接池中保留的最大连接数。Default: 15
# c3p0.maxPoolSize=10

# JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。
# 但由于预缓存的statements属于单个connection而不是整个连接池。
# 所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
# c3p0.maxStatements=0

# maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0
# c3p0.maxStatementsPerConnection=0

# c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行。Default: 3
# c3p0.numHelperThreads=3

# 当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0的数据源时。Default: null
# c3p0.overrideDefaultUser=

# 与overrideDefaultUser参数对应使用的一个参数。Default: null
# c3p0.overrideDefaultPassword=

# 定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：测试的表必须在初始数据源的时候就存在。Default: null
# c3p0.preferredTestQuery=select 1

# 用户修改系统配置参数执行前最多等待300秒。Default: 300
# c3p0.propertyCycle=300

# 因性能消耗大请只在需要的时候使用它。
# 如果设为true那么在每个connection提交的时候都将校验其有效性。
# 建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false
# c3p0.testConnectionOnCheckout=false

# 如果设为true那么在取得连接的同时将校验连接的有效性。Default: false
# c3p0.testConnectionOnCheckin=false

#######################################################################################
####################        DRUID连接池配置        ######################################
#######################################################################################
# 初始化连接数量
# druid.initialSize=1

# 最大并发连接数
# druid.maxActive=5

# 最大空闲连接数
# druid.maxIdle=5

# 最小空闲连接数
# druid.minIdle=1

# 配置获取连接等待超时的时间
# druid.maxWait=30000

# 超过时间限制是否回收 
# druid.removeAbandoned=true

# 超过时间限制多长 
# druid.removeAbandonedTimeout=180

# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
# druid.timeBetweenEvictionRunsMillis=10000

# 配置一个连接在池中最小生存的时间，单位是毫秒
# druid.minEvictableIdleTimeMillis=60000

# 用来检测连接是否有效的sql，要求是一个查询语句
# druid.validationQuery=select 1

# 申请连接的时候检测
# druid.testWhileIdle=true

# 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
# druid.testOnBorrow=false

# 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
# druid.testOnReturn=false

# 打开PSCache，并且指定每个连接上PSCache的大小
# druid.poolPreparedStatements=true

# druid.maxPoolPreparedStatementPerConnectionSize=20

# 属性类型是字符串，通过别名的方式配置扩展插件，
# 常用的插件有： 
#	监控统计用的filter:stat 
#	日志用的filter:log4j  
# 	防御SQL注入的filter:wall
# druid.filters=stat
